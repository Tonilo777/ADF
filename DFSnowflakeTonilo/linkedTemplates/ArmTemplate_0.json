{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "DFSnowflakeTonilo"
		},
		"AzureBlobStorage1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage1'"
		},
		"LS_Storage_Account_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'LS_Storage_Account'"
		},
		"SnowflakeCN_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'SnowflakeCN'"
		},
		"SnowflakeCN_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "JAVATEST"
		},
		"TriggerCentral_properties_Ingest_parameters_relative_path": {
			"type": "string",
			"defaultValue": "@triggerBody().folderPath"
		},
		"TriggerCentral_properties_Ingest_parameters_tenant_id": {
			"type": "string",
			"defaultValue": "@split(triggerBody().folderPath,'/')[2]"
		},
		"TriggerCentral_properties_Ingest_parameters_company_id": {
			"type": "string",
			"defaultValue": "@split(triggerBody().folderPath,'/')[3]"
		},
		"TriggerCentral_properties_Ingest_parameters_file_name": {
			"type": "string",
			"defaultValue": "@triggerBody().fileName"
		},
		"TriggerCentral_properties_Ingest_parameters_sub_path": {
			"type": "string",
			"defaultValue": "@concat(split(triggerBody().folderPath,'/')[2], '/', split(triggerBody().folderPath,'/')[3])"
		},
		"TriggerCentral_properties_typeProperties_scope": {
			"type": "string",
			"defaultValue": "/subscriptions/e1a1b127-0ee4-4c2d-b2f1-3ab84c1cafad/resourceGroups/RGTonilo/providers/Microsoft.Storage/storageAccounts/ingestiontonilo"
		},
		"TriggerCentral_test_properties_Ingest_test_parameters_relative_path": {
			"type": "string",
			"defaultValue": "@triggerBody().folderPath"
		},
		"TriggerCentral_test_properties_Ingest_test_parameters_tenant_id": {
			"type": "string",
			"defaultValue": "@split(triggerBody().folderPath,'/')[1]"
		},
		"TriggerCentral_test_properties_Ingest_test_parameters_company_id": {
			"type": "string",
			"defaultValue": "@split(triggerBody().folderPath,'/')[2]"
		},
		"TriggerCentral_test_properties_Ingest_test_parameters_file_name": {
			"type": "string",
			"defaultValue": "@triggerBody().fileName"
		},
		"TriggerCentral_test_properties_Ingest_test_parameters_sub_path": {
			"type": "string",
			"defaultValue": "@concat(split(triggerBody().folderPath,'/')[1], '/', split(triggerBody().folderPath,'/')[2])"
		},
		"TriggerCentral_test_properties_typeProperties_scope": {
			"type": "string",
			"defaultValue": "/subscriptions/e1a1b127-0ee4-4c2d-b2f1-3ab84c1cafad/resourceGroups/RGTonilo/providers/Microsoft.Storage/storageAccounts/ingestiontonilo"
		},
		"TriggerSnowflake_properties_Snowflake_parameters_tenantId": {
			"type": "string",
			"defaultValue": "@split(triggerBody().folderPath,'/')[0]"
		},
		"TriggerSnowflake_properties_Snowflake_parameters_containerName": {
			"type": "string",
			"defaultValue": "@split(triggerBody().folderPath,'/')[0]"
		},
		"TriggerSnowflake_properties_Snowflake_parameters_relativePath": {
			"type": "string",
			"defaultValue": "@concat(triggerBody().folderPath,'/',triggerBody().fileName)"
		},
		"TriggerSnowflake_properties_Snowflake_parameters_fileName": {
			"type": "string",
			"defaultValue": "@triggerBody().fileName"
		},
		"TriggerSnowflake_properties_Snowflake_parameters_folderPath": {
			"type": "string",
			"defaultValue": "@triggerBody().folderPath"
		},
		"TriggerSnowflake_properties_Snowflake_parameters_companyId": {
			"type": "string",
			"defaultValue": "@coalesce(split(triggerBody().folderPath,'/')[1], split(triggerBody().folderPath,'/')[0])"
		},
		"TriggerSnowflake_properties_typeProperties_scope": {
			"type": "string",
			"defaultValue": "/subscriptions/e1a1b127-0ee4-4c2d-b2f1-3ab84c1cafad/resourceGroups/RGTonilo/providers/Microsoft.Storage/storageAccounts/tonilosnowflk"
		},
		"TriggerSnowflake_test_properties_Snowflake_test_parameters_tenantId": {
			"type": "string",
			"defaultValue": "@split(triggerBody().folderPath,'/')[0]"
		},
		"TriggerSnowflake_test_properties_Snowflake_test_parameters_containerName": {
			"type": "string",
			"defaultValue": "@split(triggerBody().folderPath,'/')[0]"
		},
		"TriggerSnowflake_test_properties_Snowflake_test_parameters_relativePath": {
			"type": "string",
			"defaultValue": "@concat(triggerBody().folderPath,'/',triggerBody().fileName)"
		},
		"TriggerSnowflake_test_properties_Snowflake_test_parameters_fileName": {
			"type": "string",
			"defaultValue": "@triggerBody().fileName"
		},
		"TriggerSnowflake_test_properties_Snowflake_test_parameters_folderPath": {
			"type": "string",
			"defaultValue": "@triggerBody().folderPath"
		},
		"TriggerSnowflake_test_properties_Snowflake_test_parameters_companyId": {
			"type": "string",
			"defaultValue": "@if(contains(triggerBody().folderPath, '/'), replace(triggerBody().folderPath, concat(first(split(triggerBody().folderPath, '/')), '/'), ''), triggerBody().folderPath)"
		},
		"TriggerSnowflake_test_properties_typeProperties_scope": {
			"type": "string",
			"defaultValue": "/subscriptions/e1a1b127-0ee4-4c2d-b2f1-3ab84c1cafad/resourceGroups/RGTonilo/providers/Microsoft.Storage/storageAccounts/tonilosnowflk"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage1_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_Storage_Account')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('LS_Storage_Account_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SnowflakeCN')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "SnowflakeV2",
				"typeProperties": {
					"authenticationType": "Basic",
					"accountIdentifier": "zqevlgm-jx58551",
					"user": "prtenjacatoni55",
					"database": "[parameters('SnowflakeCN_properties_typeProperties_database')]",
					"warehouse": "COMPUTE_WH",
					"password": {
						"type": "SecureString",
						"value": "[parameters('SnowflakeCN_password')]"
					}
				},
				"version": "1.1"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_ClientSource')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_Storage_Account",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"containerName": {
						"type": "string"
					},
					"folderPath": {
						"type": "string"
					},
					"fileName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().fileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().folderPath",
							"type": "Expression"
						},
						"container": {
							"value": "@dataset().containerName",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_Storage_Account')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_tenant1Sink')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"companyFolder": {
						"type": "string"
					},
					"fileName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().fileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().companyFolder",
							"type": "Expression"
						},
						"container": "central"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SnowflakeLookup')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SnowflakeCN",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SnowflakeV2Table",
				"schema": [
					{
						"name": "TENANT_ID",
						"type": "NUMBER",
						"precision": 38,
						"scale": 0
					},
					{
						"name": "TENANT_NAME",
						"type": "VARCHAR",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "CREATED_AT",
						"type": "TIMESTAMP_NTZ",
						"precision": 0,
						"scale": 9
					}
				],
				"typeProperties": {
					"schema": "TONILO_WAREHOUSE",
					"table": "DIM_TENANT"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SnowflakeCN')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Ingest')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Metadata1",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Resolve CompanyID",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_tenant1Sink",
								"type": "DatasetReference",
								"parameters": {
									"companyFolder": {
										"value": "@pipeline().parameters.sub_path",
										"type": "Expression"
									},
									"fileName": {
										"value": "@pipeline().parameters.file_name",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"size",
								"lastModified",
								"contentMD5"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					},
					{
						"name": "Ingest queue",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Get Metadata1",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "SnowflakeCN",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "NonQuery",
									"text": {
										"value": "INSERT INTO JAVATEST.JAVATEST1.MDB_INGEST_QUEUE\n(QUEUE_ID, RELATIVE_PATH, SIZE_BYTES, LAST_MODIFIED, STATUS, ATTEMPTS, ENQUEUED_AT, TENANT_ID, COMPANY_ID, TENANT_NAME, COMPANY_NAME)\nSELECT\n  UUID_STRING(),\n  '@{concat(pipeline().parameters.sub_path, '/', pipeline().parameters.file_name)}',\n  @{activity('Get Metadata1').output.size},\n  TO_TIMESTAMP_NTZ('@{activity('Get Metadata1').output.lastModified}'),\n  'QUEUED',\n  0,\n  CURRENT_TIMESTAMP(),\n  @{variables('ResolvedTenantID')},       \n  @{variables('ResolvedCompanyID')},      \n  '@{pipeline().parameters.tenant_id}',   \n  '@{pipeline().parameters.company_id}'\n",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "Insert",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Ingest queue",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "SnowflakeCN",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": "CALL JAVATEST.JAVATEST1.PROC_INGEST_NEXT_MDB2()"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "dbt job call",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Insert",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "POST",
							"headers": {
								"Authorization": "Token dbtc_E6Qw_z80dL3U0sBjAh9Bsg_bZsgKRQ43mYbQoK0-lwLpDFj8ls",
								"Content-Type": "application/json"
							},
							"url": "https://gz086.us1.dbt.com/api/v2/accounts/70471823487150/jobs/70471823499473/run/",
							"body": {
								"cause": "Triggered via API"
							}
						}
					},
					{
						"name": "Truncate",
						"type": "Script",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "SnowflakeCN",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": "TRUNCATE TABLE javatest.javatest1.CITIES;\nTRUNCATE TABLE javatest.javatest1.CURRENCIES;\nTRUNCATE TABLE javatest.javatest1.INVOICES;\nTRUNCATE TABLE javatest.javatest1.TINVOICES;\nTRUNCATE TABLE javatest.javatest1.OFFERS;\nTRUNCATE TABLE javatest.javatest1.TOFFERS;\nTRUNCATE TABLE javatest.javatest1.ITEMS;\nTRUNCATE TABLE javatest.javatest1.ITEMGROUP;\nTRUNCATE TABLE javatest.javatest1.EMPLOYEES;\nTRUNCATE TABLE javatest.javatest1.TEMPLOYEES;\nTRUNCATE TABLE javatest.javatest1.WAREHOUSES;\nTRUNCATE TABLE javatest.javatest1.CUSTOMERLIST;\nTRUNCATE TABLE javatest.javatest1.ITEMSTOCK;\nTRUNCATE TABLE javatest.javatest1.MATERIAL;\nTRUNCATE TABLE javatest.javatest1.MATERIALSTOCK;\nTRUNCATE TABLE javatest.javatest1.TITEMS;\nTRUNCATE TABLE javatest.javatest1.PARTNERS;\nTRUNCATE TABLE javatest.javatest1.TPARTNERS;\nTRUNCATE TABLE javatest.javatest1.BANK;\nTRUNCATE TABLE javatest.javatest1.ACCOUNTS;\nTRUNCATE TABLE javatest.javatest1.FISOPERATOR;\nTRUNCATE TABLE javatest.javatest1.INTCOUNTRY;\n"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "LookupTenant",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Tenant merge",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SnowflakeV2Source",
								"query": {
									"value": "SELECT tenant_ID \nFROM javatest.tonilo_warehouse.dim_tenant \nWHERE tenant_name = '@{pipeline().parameters.tenant_id}'\n",
									"type": "Expression"
								},
								"exportSettings": {
									"type": "SnowflakeExportCopyCommand"
								}
							},
							"dataset": {
								"referenceName": "SnowflakeLookup",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "LookupCompany",
						"description": "",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Company merge",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SnowflakeV2Source",
								"query": {
									"value": "SELECT company_ID\nFROM javatest.tonilo_warehouse.dim_company\nWHERE tenant_ID = '@{variables('ResolvedTenantID')}'\n  AND company_name = '@{pipeline().parameters.company_id}'\n",
									"type": "Expression"
								},
								"exportSettings": {
									"type": "SnowflakeExportCopyCommand"
								}
							},
							"dataset": {
								"referenceName": "SnowflakeLookup",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Tenant merge",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "SnowflakeCN",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "NonQuery",
									"text": {
										"value": "MERGE INTO JAVATEST.TONILO_WAREHOUSE.DIM_TENANT AS tgt\nUSING (\n    SELECT\n        '@{pipeline().parameters.tenant_id}' AS TENANT_NAME\n) AS src\nON tgt.tenant_name = src.tenant_name\nWHEN MATCHED THEN\n    UPDATE SET tenant_name = src.tenant_name   -- optional, usually no-op\nWHEN NOT MATCHED THEN\n    INSERT (tenant_name, created_at)\n    VALUES (src.tenant_name, CURRENT_TIMESTAMP);\n",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "Resolve tenantID",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LookupTenant",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "ResolvedTenantID",
							"value": {
								"value": "@string(activity('LookupTenant').output.firstRow.TENANT_ID)\n",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Company merge",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Resolve tenantID",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "SnowflakeCN",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "NonQuery",
									"text": {
										"value": "MERGE INTO JAVATEST.TONILO_WAREHOUSE.DIM_COMPANY AS tgt\nUSING (\n    SELECT\n        @{variables('ResolvedTenantID')}      AS TENANT_ID,\n        '@{pipeline().parameters.company_id}' AS COMPANY_NAME\n) AS src\nON  tgt.tenant_id    = src.tenant_id\nAND tgt.company_name = src.company_name\n\nWHEN MATCHED THEN\n    UPDATE SET company_name = src.company_name   -- optional, usually no-op\n\nWHEN NOT MATCHED THEN\n    INSERT (tenant_id, company_name, created_at)\n    VALUES (src.tenant_id, src.company_name, CURRENT_TIMESTAMP);\n",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "Resolve CompanyID",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LookupCompany",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "ResolvedCompanyID",
							"value": {
								"value": "@string(activity('LookupCompany').output.firstRow.COMPANY_ID)\n",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Script1",
						"type": "Script",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "SnowflakeCN",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "NonQuery",
									"text": {
										"value": "UPDATE JAVATEST.JAVATEST1.MDB_INGEST_QUEUE\nSET \n  STATUS = 'DLQ',\n  ERROR = OBJECT_CONSTRUCT(\n    'errorType', 'DBT',\n    'errorMessage', '@{activity('dbt job call').output.error.errors[0].Message}',\n    'relativePath', RELATIVE_PATH,\n    'tenantId', TENANT_ID,\n    'companyId', COMPANY_ID\n  ),\n  FINISHED_AT = CURRENT_TIMESTAMP()\nWHERE RELATIVE_PATH = '@{pipeline().parameters.relative_path}';\n",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"relative_path": {
						"type": "string"
					},
					"tenant_id": {
						"type": "string"
					},
					"company_id": {
						"type": "string"
					},
					"file_name": {
						"type": "string"
					},
					"sub_path": {
						"type": "string"
					},
					"ResolvedTenantID": {
						"type": "string"
					}
				},
				"variables": {
					"ResolvedTenantID": {
						"type": "String"
					},
					"ResolvedCompanyID": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2025-08-27T13:01:05Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_tenant1Sink')]",
				"[concat(variables('factoryId'), '/linkedServices/SnowflakeCN')]",
				"[concat(variables('factoryId'), '/datasets/SnowflakeLookup')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Ingest_test')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "File Size Validation",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Resolve CompanyID",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 2,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_tenant1Sink",
								"type": "DatasetReference",
								"parameters": {
									"companyFolder": {
										"value": "@pipeline().parameters.sub_path",
										"type": "Expression"
									},
									"fileName": {
										"value": "@pipeline().parameters.file_name",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"size",
								"lastModified",
								"exists",
								"contentMD5"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					},
					{
						"name": "File Size Validation Check",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "File Size Validation",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@and(equals(activity('File Size Validation').Status, 'Succeeded'), lessOrEquals(activity('File Size Validation').output.size, pipeline().parameters.max_file_size_bytes))",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Log File Size Error and Mark Failed",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "SnowflakeCN",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "NonQuery",
												"text": {
													"value": "-- Log the validation error\nINSERT INTO JAVATEST.JAVATEST1.PIPELINE_EXECUTION_LOG\n(LOG_ID, PIPELINE_NAME, PIPELINE_RUN_ID, STATUS, ERROR_TIME, TENANT_ID, COMPANY_ID, FILE_PATH, MESSAGE, ERROR_DETAILS)\nSELECT \n  UUID_STRING(),\n  'Ingest_test',\n  '@{pipeline().RunId}',\n  'VALIDATION_ERROR',\n  CURRENT_TIMESTAMP(),\n  '@{pipeline().parameters.tenant_id}',\n  '@{pipeline().parameters.company_id}',\n  '@{concat(pipeline().parameters.sub_path, '/', pipeline().parameters.file_name)}',\n  'File size validation failed - pipeline terminated',\n  OBJECT_CONSTRUCT('validationStatus', '@{activity('File Size Validation').Status}', 'maxAllowed', @{pipeline().parameters.max_file_size_bytes});\n\n-- Mark file as failed in queue\nINSERT INTO JAVATEST.JAVATEST1.MDB_INGEST_QUEUE\n(QUEUE_ID, RELATIVE_PATH, SIZE_BYTES, LAST_MODIFIED, STATUS, ATTEMPTS, ENQUEUED_AT, ERROR, FINISHED_AT, TENANT_ID, COMPANY_ID, TENANT_NAME, COMPANY_NAME)\nSELECT\n  UUID_STRING(),\n  '@{concat(pipeline().parameters.sub_path, '/', pipeline().parameters.file_name)}',\n  0,\n  CURRENT_TIMESTAMP(),\n  'FAILED_VALIDATION',\n  0,\n  CURRENT_TIMESTAMP(),\n  OBJECT_CONSTRUCT('errorType', 'FILE_SIZE_VALIDATION', 'errorMessage', 'File size validation failed'),\n  CURRENT_TIMESTAMP(),\n  COALESCE(TRY_CAST('@{variables('ResolvedTenantID')}' AS NUMBER), 0),\n  COALESCE(TRY_CAST('@{variables('ResolvedCompanyID')}' AS NUMBER), 0),\n  '@{pipeline().parameters.tenant_id}',\n  '@{pipeline().parameters.company_id}';",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								}
							]
						}
					},
					{
						"name": "Duplicate File Check",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "File Size Validation Check",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Resolve CompanyID",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 2,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SnowflakeV2Source",
								"query": {
									"value": "-- Content-based duplicate detection with fallback logic\nSELECT \n  COUNT(*) as duplicate_count,\n  MAX(RELATIVE_PATH) as existing_file_path,\n  MAX(ENQUEUED_AT) as last_processed\nFROM JAVATEST.JAVATEST1.MDB_INGEST_QUEUE \nWHERE (\n    -- Primary: MD5-based detection (most accurate)\n    (MD5 IS NOT NULL \n     AND '@{activity('File Size Validation').output.contentMD5}' IS NOT NULL \n     AND MD5 = '@{activity('File Size Validation').output.contentMD5}'\n    )\n    OR\n    -- Fallback: Size + last modified + tenant/company (when MD5 unavailable)\n    (MD5 IS NULL \n     AND SIZE_BYTES = @{activity('File Size Validation').output.size}\n     AND ABS(DATEDIFF('second', LAST_MODIFIED, TO_TIMESTAMP_NTZ('@{activity('File Size Validation').output.lastModified}'))) <= 60\n    )\n  )\n  AND TENANT_ID = @{variables('ResolvedTenantID')}\n  AND COMPANY_ID = @{variables('ResolvedCompanyID')}\n  AND STATUS IN ('QUEUED', 'PROCESSING', 'COMPLETED')\n  AND ENQUEUED_AT >= DATEADD('day', -7, CURRENT_TIMESTAMP())\nFOR UPDATE;",
									"type": "Expression"
								},
								"exportSettings": {
									"type": "SnowflakeExportCopyCommand"
								}
							},
							"dataset": {
								"referenceName": "SnowflakeLookup",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Duplicate File Validation",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Duplicate File Check",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('Duplicate File Check').output.firstRow.DUPLICATE_COUNT, 0)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Log Duplicate File Error and Mark Failed",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "SnowflakeCN",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "NonQuery",
												"text": {
													"value": "-- Log the validation error with enhanced duplicate information\nINSERT INTO JAVATEST.JAVATEST1.PIPELINE_EXECUTION_LOG\n(LOG_ID, PIPELINE_NAME, PIPELINE_RUN_ID, STATUS, ERROR_TIME, TENANT_ID, COMPANY_ID, FILE_PATH, MESSAGE, ERROR_DETAILS)\nVALUES (\n  UUID_STRING(),\n  'Ingest_test',\n  '@{pipeline().RunId}',\n  'VALIDATION_ERROR',\n  CURRENT_TIMESTAMP(),\n  '@{pipeline().parameters.tenant_id}',\n  '@{pipeline().parameters.company_id}',\n  '@{concat(pipeline().parameters.sub_path, '/', pipeline().parameters.file_name)}',\n  'Content-based duplicate file detected - pipeline terminated',\n  OBJECT_CONSTRUCT(\n    'errorType', 'CONTENT_DUPLICATE',\n    'duplicateCount', '@{activity('Duplicate File Check').output.firstRow.DUPLICATE_COUNT}',\n    'existingFilePath', '@{activity('Duplicate File Check').output.firstRow.EXISTING_FILE_PATH}',\n    'contentMD5', '@{activity('File Size Validation').output.contentMD5}',\n    'fileSize', '@{activity('File Size Validation').output.size}',\n    'lastProcessed', '@{activity('Duplicate File Check').output.firstRow.LAST_PROCESSED}'\n  )\n);\n\n-- DO NOT insert duplicate into queue - skip insertion entirely for true duplicates",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								}
							]
						}
					},
					{
						"name": "Business Rules Validation",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Duplicate File Validation",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Resolve CompanyID",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 1,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "SnowflakeCN",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "-- Business Rules Validation\nSELECT \n  CASE \n    WHEN NOT ENDSWITH('@{pipeline().parameters.file_name}', '.mdb') THEN 'Invalid file format: must be .mdb'\n    WHEN LENGTH('@{pipeline().parameters.tenant_id}') = 0 THEN 'Invalid tenant ID: cannot be empty'\n    WHEN LENGTH('@{pipeline().parameters.company_id}') = 0 THEN 'Invalid company ID: cannot be empty'\n    WHEN '@{activity('File Size Validation').output.lastModified}' < DATEADD('day', -30, CURRENT_TIMESTAMP()) THEN 'File too old: older than 30 days'\n    WHEN '@{activity('File Size Validation').output.lastModified}' > DATEADD('hour', 1, CURRENT_TIMESTAMP()) THEN 'File from future: invalid timestamp'\n    ELSE 'VALID'\n  END as validation_result,\n  '@{pipeline().parameters.file_name}' as file_name,\n  '@{pipeline().parameters.tenant_id}' as tenant_id,\n  '@{pipeline().parameters.company_id}' as company_id,\n  '@{activity('File Size Validation').output.size}' as file_size,\n  '@{activity('File Size Validation').output.lastModified}' as last_modified;",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "Business Rules Check",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Business Rules Validation",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('Business Rules Validation').output.resultSets[0].rows[0].validation_result, 'VALID')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Log Business Rules Error",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "SnowflakeCN",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "NonQuery",
												"text": {
													"value": "-- Log the validation error\nINSERT INTO JAVATEST.JAVATEST1.PIPELINE_EXECUTION_LOG\n(LOG_ID, PIPELINE_NAME, PIPELINE_RUN_ID, STATUS, ERROR_TIME, TENANT_ID, COMPANY_ID, FILE_PATH, MESSAGE, ERROR_DETAILS)\nSELECT \n  UUID_STRING(),\n  'Ingest_test',\n  '@{pipeline().RunId}',\n  'VALIDATION_ERROR',\n  CURRENT_TIMESTAMP(),\n  '@{pipeline().parameters.tenant_id}',\n  '@{pipeline().parameters.company_id}',\n  '@{concat(pipeline().parameters.sub_path, '/', pipeline().parameters.file_name)}',\n  'Business rules validation failed - pipeline terminated',\n  OBJECT_CONSTRUCT('validationResult', '@{activity('Business Rules Validation').output.resultSets[0].rows[0].validation_result}');\n\n-- Mark file as failed in queue\nINSERT INTO JAVATEST.JAVATEST1.MDB_INGEST_QUEUE\n(QUEUE_ID, RELATIVE_PATH, SIZE_BYTES, LAST_MODIFIED, STATUS, ATTEMPTS, ENQUEUED_AT, ERROR, FINISHED_AT, TENANT_ID, COMPANY_ID, TENANT_NAME, COMPANY_NAME)\nSELECT\n  UUID_STRING(),\n  '@{concat(pipeline().parameters.sub_path, '/', pipeline().parameters.file_name)}',\n  0,\n  CURRENT_TIMESTAMP(),\n  'FAILED_VALIDATION',\n  0,\n  CURRENT_TIMESTAMP(),\n  OBJECT_CONSTRUCT('errorType', 'BUSINESS_RULES', 'errorMessage', 'Business rules validation failed', 'validationResult', '@{activity('Business Rules Validation').output.resultSets[0].rows[0].validation_result}'),\n  CURRENT_TIMESTAMP(),\n  COALESCE(TRY_CAST('@{variables('ResolvedTenantID')}' AS NUMBER), 0),\n  COALESCE(TRY_CAST('@{variables('ResolvedCompanyID')}' AS NUMBER), 0),\n  '@{pipeline().parameters.tenant_id}',\n  '@{pipeline().parameters.company_id}';",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Log Validation Success",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 2,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "SnowflakeCN",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "NonQuery",
												"text": {
													"value": "INSERT INTO JAVATEST.JAVATEST1.PIPELINE_EXECUTION_LOG\n(LOG_ID, PIPELINE_NAME, PIPELINE_RUN_ID, STATUS, START_TIME, TENANT_ID, COMPANY_ID, FILE_PATH, MESSAGE, ERROR_DETAILS)\nSELECT \n  UUID_STRING(),\n  'Ingest_test',\n  '@{pipeline().RunId}',\n  'VALIDATION_PASSED',\n  CURRENT_TIMESTAMP(),\n  '@{pipeline().parameters.tenant_id}',\n  '@{pipeline().parameters.company_id}',\n  '@{concat(pipeline().parameters.sub_path, '/', pipeline().parameters.file_name)}',\n  'All pre-processing validations passed',\n  OBJECT_CONSTRUCT(\n    'fileSize', '@{activity('File Size Validation').output.size}',\n    'lastModified', '@{activity('File Size Validation').output.lastModified}',\n    'duplicateCheck', '@{activity('Duplicate File Check').output.firstRow.DUPLICATE_COUNT}',\n    'businessRulesResult', '@{activity('Business Rules Validation').output.resultSets[0].rows[0].validation_result}'\n  );",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								}
							]
						}
					},
					{
						"name": "Ingest queue",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Business Rules Check",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Resolve CompanyID",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 3,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "SnowflakeCN",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "NonQuery",
									"text": {
										"value": "-- Atomic insert with content-based duplicate prevention using existing MD5 column\n-- Insert only if content (MD5 + size + tenant/company) doesn't already exist\nINSERT INTO JAVATEST.JAVATEST1.MDB_INGEST_QUEUE\n(QUEUE_ID, RELATIVE_PATH, SIZE_BYTES, LAST_MODIFIED, STATUS, ATTEMPTS, ENQUEUED_AT, TENANT_ID, COMPANY_ID, TENANT_NAME, COMPANY_NAME, MD5)\nSELECT\n  UUID_STRING(),\n  '@{concat(pipeline().parameters.sub_path, '/', pipeline().parameters.file_name)}',\n  COALESCE(TRY_CAST('@{if(contains(string(activity('File Size Validation').output), 'size'), activity('File Size Validation').output.size, '0')}' AS NUMBER), 0),\n  COALESCE(TO_TIMESTAMP_NTZ('@{if(contains(string(activity('File Size Validation').output), 'lastModified'), activity('File Size Validation').output.lastModified, '')}'), CURRENT_TIMESTAMP()),\n  'QUEUED',\n  0,\n  CURRENT_TIMESTAMP(),\n  @{variables('ResolvedTenantID')},       \n  @{variables('ResolvedCompanyID')},      \n  '@{pipeline().parameters.tenant_id}',   \n  '@{pipeline().parameters.company_id}',\n  '@{activity('File Size Validation').output.contentMD5}'\nWHERE NOT EXISTS (\n  SELECT 1 FROM JAVATEST.JAVATEST1.MDB_INGEST_QUEUE existing\n  WHERE existing.MD5 = '@{activity('File Size Validation').output.contentMD5}'\n    AND existing.SIZE_BYTES = @{activity('File Size Validation').output.size}\n    AND existing.TENANT_ID = @{variables('ResolvedTenantID')}\n    AND existing.COMPANY_ID = @{variables('ResolvedCompanyID')}\n    AND existing.STATUS IN ('QUEUED', 'PROCESSING', 'COMPLETED')\n    AND existing.ENQUEUED_AT >= DATEADD('day', -7, CURRENT_TIMESTAMP())\n);\n",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "Insert",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Ingest queue",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 2,
							"retryIntervalInSeconds": 60,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "SnowflakeCN",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "NonQuery",
									"text": {
										"value": "-- Update status to PROCESSING before calling stored procedure\nUPDATE JAVATEST.JAVATEST1.MDB_INGEST_QUEUE\nSET STATUS = 'PROCESSING', \n    ATTEMPTS = ATTEMPTS + 1\nWHERE RELATIVE_PATH = '@{concat(pipeline().parameters.sub_path, '/', pipeline().parameters.file_name)}'\n  AND STATUS = 'QUEUED';",
										"type": "Expression"
									}
								},
								{
									"type": "Query",
									"text": "CALL JAVATEST.JAVATEST1.PROC_INGEST_NEXT_MDB2()"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "dbt job call",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Insert",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "POST",
							"headers": {
								"Authorization": "Token dbtc_E6Qw_z80dL3U0sBjAh9Bsg_bZsgKRQ43mYbQoK0-lwLpDFj8ls",
								"Content-Type": "application/json"
							},
							"url": "https://gz086.us1.dbt.com/api/v2/accounts/70471823487150/jobs/70471823499473/run/",
							"body": {
								"cause": "Triggered via API"
							}
						}
					},
					{
						"name": "Truncate",
						"type": "Script",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "SnowflakeCN",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": "TRUNCATE TABLE javatest.javatest1.CITIES;\nTRUNCATE TABLE javatest.javatest1.CURRENCIES;\nTRUNCATE TABLE javatest.javatest1.INVOICES;\nTRUNCATE TABLE javatest.javatest1.TINVOICES;\nTRUNCATE TABLE javatest.javatest1.OFFERS;\nTRUNCATE TABLE javatest.javatest1.TOFFERS;\nTRUNCATE TABLE javatest.javatest1.ITEMS;\nTRUNCATE TABLE javatest.javatest1.ITEMGROUP;\nTRUNCATE TABLE javatest.javatest1.EMPLOYEES;\nTRUNCATE TABLE javatest.javatest1.TEMPLOYEES;\nTRUNCATE TABLE javatest.javatest1.WAREHOUSES;\nTRUNCATE TABLE javatest.javatest1.CUSTOMERLIST;\nTRUNCATE TABLE javatest.javatest1.ITEMSTOCK;\nTRUNCATE TABLE javatest.javatest1.MATERIAL;\nTRUNCATE TABLE javatest.javatest1.MATERIALSTOCK;\nTRUNCATE TABLE javatest.javatest1.TITEMS;\nTRUNCATE TABLE javatest.javatest1.PARTNERS;\nTRUNCATE TABLE javatest.javatest1.TPARTNERS;\nTRUNCATE TABLE javatest.javatest1.BANK;\nTRUNCATE TABLE javatest.javatest1.ACCOUNTS;\nTRUNCATE TABLE javatest.javatest1.FISOPERATOR;\nTRUNCATE TABLE javatest.javatest1.INTCOUNTRY;\n"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "Tenant merge",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "SnowflakeCN",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "NonQuery",
									"text": {
										"value": "MERGE INTO JAVATEST.TONILO_WAREHOUSE.DIM_TENANT AS tgt\nUSING (\n    SELECT\n        '@{pipeline().parameters.tenant_id}' AS TENANT_NAME\n) AS src\nON tgt.tenant_name = src.tenant_name\nWHEN MATCHED THEN\n    UPDATE SET tenant_name = src.tenant_name   -- optional, usually no-op\nWHEN NOT MATCHED THEN\n    INSERT (tenant_name, created_at)\n    VALUES (src.tenant_name, CURRENT_TIMESTAMP());",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "LookupTenant",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Tenant merge",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SnowflakeV2Source",
								"query": {
									"value": "SELECT tenant_ID \nFROM javatest.tonilo_warehouse.dim_tenant \nWHERE tenant_name = '@{pipeline().parameters.tenant_id}'\n",
									"type": "Expression"
								},
								"exportSettings": {
									"type": "SnowflakeExportCopyCommand"
								}
							},
							"dataset": {
								"referenceName": "SnowflakeLookup",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Resolve tenantID",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LookupTenant",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "ResolvedTenantID",
							"value": {
								"value": "@string(activity('LookupTenant').output.firstRow.TENANT_ID)\n",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Company merge",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Resolve tenantID",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "SnowflakeCN",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "NonQuery",
									"text": {
										"value": "MERGE INTO JAVATEST.TONILO_WAREHOUSE.DIM_COMPANY AS tgt\nUSING (\n    SELECT\n        @{variables('ResolvedTenantID')}      AS TENANT_ID,\n        '@{pipeline().parameters.company_id}' AS COMPANY_NAME\n) AS src\nON  tgt.tenant_id    = src.tenant_id\nAND tgt.company_name = src.company_name\n\nWHEN MATCHED THEN\n    UPDATE SET company_name = src.company_name   -- optional, usually no-op\n\nWHEN NOT MATCHED THEN\n    INSERT (tenant_id, company_name, created_at)\n    VALUES (src.tenant_id, src.company_name, CURRENT_TIMESTAMP());",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "LookupCompany",
						"description": "",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Company merge",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SnowflakeV2Source",
								"query": {
									"value": "SELECT company_ID\nFROM javatest.tonilo_warehouse.dim_company\nWHERE tenant_ID = '@{variables('ResolvedTenantID')}'\n  AND company_name = '@{pipeline().parameters.company_id}'\n",
									"type": "Expression"
								},
								"exportSettings": {
									"type": "SnowflakeExportCopyCommand"
								}
							},
							"dataset": {
								"referenceName": "SnowflakeLookup",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Resolve CompanyID",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LookupCompany",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "ResolvedCompanyID",
							"value": {
								"value": "@string(activity('LookupCompany').output.firstRow.COMPANY_ID)\n",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Log Pipeline Start",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Resolve CompanyID",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "SnowflakeCN",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "NonQuery",
									"text": {
										"value": "INSERT INTO JAVATEST.JAVATEST1.PIPELINE_EXECUTION_LOG\n(LOG_ID, PIPELINE_NAME, PIPELINE_RUN_ID, STATUS, START_TIME, TENANT_ID, COMPANY_ID, FILE_PATH, MESSAGE)\nSELECT\nUUID_STRING(), 'Ingest_test', '@{pipeline().RunId}', 'STARTED', CURRENT_TIMESTAMP(), '@{pipeline().parameters.tenant_id}', '@{pipeline().parameters.company_id}', '@{concat(pipeline().parameters.sub_path, '/', pipeline().parameters.file_name)}', 'Pipeline execution started'",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "Log DBT Error",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "dbt job call",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "SnowflakeCN",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "NonQuery",
									"text": {
										"value": "INSERT INTO JAVATEST.JAVATEST1.PIPELINE_EXECUTION_LOG\n(LOG_ID, PIPELINE_NAME, PIPELINE_RUN_ID, STATUS, ERROR_TIME, TENANT_ID, COMPANY_ID, FILE_PATH, MESSAGE, ERROR_DETAILS)\nSELECT\nUUID_STRING(), 'Ingest_test', '@{pipeline().RunId}', 'ERROR', CURRENT_TIMESTAMP(), '@{pipeline().parameters.tenant_id}', '@{pipeline().parameters.company_id}', '@{concat(pipeline().parameters.sub_path, '/', pipeline().parameters.file_name)}', 'DBT job failed', '@{activity('dbt job call').error.message}');\n\n\nUPDATE JAVATEST.JAVATEST1.MDB_INGEST_QUEUE\nSET \n  STATUS = 'DLQ',\n  ERROR = OBJECT_CONSTRUCT(\n    'errorType', 'DBT',\n    'errorMessage', '@{activity('dbt job call').error.message}',\n    'relativePath', RELATIVE_PATH,\n    'tenantId', TENANT_ID,\n    'companyId', COMPANY_ID\n  ),\n  FINISHED_AT = CURRENT_TIMESTAMP()\nWHERE RELATIVE_PATH = '@{concat(pipeline().parameters.sub_path, '/', pipeline().parameters.file_name)}';\n",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "Log Pipeline Success",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "dbt job call",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "SnowflakeCN",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "NonQuery",
									"text": {
										"value": "-- Log success and update queue status to COMPLETED\nINSERT INTO JAVATEST.JAVATEST1.PIPELINE_EXECUTION_LOG\n(LOG_ID, PIPELINE_NAME, PIPELINE_RUN_ID, STATUS, END_TIME, TENANT_ID, COMPANY_ID, FILE_PATH, MESSAGE)\nVALUES (\n  UUID_STRING(), \n  'Ingest_test', \n  '@{pipeline().RunId}', \n  'SUCCESS', \n  CURRENT_TIMESTAMP(), \n  '@{pipeline().parameters.tenant_id}', \n  '@{pipeline().parameters.company_id}', \n  '@{concat(pipeline().parameters.sub_path, '/', pipeline().parameters.file_name)}', \n  'Pipeline completed successfully'\n);\n\n-- Update queue status to COMPLETED\nUPDATE JAVATEST.JAVATEST1.MDB_INGEST_QUEUE\nSET STATUS = 'COMPLETED',\n    FINISHED_AT = CURRENT_TIMESTAMP()\nWHERE RELATIVE_PATH = '@{concat(pipeline().parameters.sub_path, '/', pipeline().parameters.file_name)}'\n  AND STATUS = 'PROCESSING';",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"relative_path": {
						"type": "string"
					},
					"tenant_id": {
						"type": "string"
					},
					"company_id": {
						"type": "string"
					},
					"file_name": {
						"type": "string"
					},
					"sub_path": {
						"type": "string"
					},
					"max_file_size_bytes": {
						"type": "int",
						"defaultValue": 1073741824
					},
					"max_file_age_days": {
						"type": "int",
						"defaultValue": 30
					},
					"enable_duplicate_check": {
						"type": "bool",
						"defaultValue": true
					},
					"enable_business_rules_validation": {
						"type": "bool",
						"defaultValue": true
					}
				},
				"variables": {
					"ResolvedTenantID": {
						"type": "String"
					},
					"ResolvedCompanyID": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2025-08-27T13:01:05Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_tenant1Sink')]",
				"[concat(variables('factoryId'), '/datasets/SnowflakeLookup')]",
				"[concat(variables('factoryId'), '/linkedServices/SnowflakeCN')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Snowflake')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Set variable1",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"deleteFilesAfterCompletion": false
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings",
									"maxConcurrentConnections": 1,
									"copyBehavior": "PreserveHierarchy"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "DS_ClientSource",
								"type": "DatasetReference",
								"parameters": {
									"containerName": {
										"value": "@pipeline().parameters.containerName",
										"type": "Expression"
									},
									"folderPath": {
										"value": "@pipeline().parameters.companyId",
										"type": "Expression"
									},
									"fileName": {
										"value": "@pipeline().parameters.fileName",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_tenant1Sink",
								"type": "DatasetReference",
								"parameters": {
									"companyFolder": "@pipeline().parameters.folderPath",
									"fileName": {
										"value": "@variables('TimestampFileName')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Set variable1",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "TimestampFileName",
							"value": {
								"value": "@concat(\n  substring(pipeline().parameters.fileName, 0, lastIndexOf(pipeline().parameters.fileName, '.')),\n  '_',\n  formatDateTime(utcNow(), 'yyyyMMddHHmmss'),\n  '.',\n  last(array(split(pipeline().parameters.fileName, '.')))\n)\n",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"tenantId": {
						"type": "string"
					},
					"containerName": {
						"type": "string"
					},
					"relativePath": {
						"type": "string"
					},
					"fileName": {
						"type": "string"
					},
					"folderPath": {
						"type": "string"
					},
					"companyId": {
						"type": "string"
					}
				},
				"variables": {
					"Tenant": {
						"type": "String"
					},
					"Container": {
						"type": "String"
					},
					"RelativePath": {
						"type": "String"
					},
					"FileName": {
						"type": "String"
					},
					"TimestampFileName": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2025-08-25T07:48:42Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_ClientSource')]",
				"[concat(variables('factoryId'), '/datasets/DS_tenant1Sink')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Snowflake_test')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Set variable1",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"deleteFilesAfterCompletion": false
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings",
									"maxConcurrentConnections": 1,
									"copyBehavior": "PreserveHierarchy"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "DS_ClientSource",
								"type": "DatasetReference",
								"parameters": {
									"containerName": {
										"value": "@pipeline().parameters.containerName",
										"type": "Expression"
									},
									"folderPath": {
										"value": "@if(contains(pipeline().parameters.folderPath, '/'), replace(pipeline().parameters.folderPath, concat(pipeline().parameters.tenantId, '/'), ''), '')",
										"type": "Expression"
									},
									"fileName": {
										"value": "@pipeline().parameters.fileName",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_tenant1Sink",
								"type": "DatasetReference",
								"parameters": {
									"companyFolder": "@concat(pipeline().parameters.tenantId, '/', pipeline().parameters.companyId)",
									"fileName": {
										"value": "@variables('TimestampFileName')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Log Pipeline Start",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "SnowflakeCN",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "NonQuery",
									"text": {
										"value": "INSERT INTO JAVATEST.JAVATEST1.PIPELINE_EXECUTION_LOG\n(LOG_ID, PIPELINE_NAME, PIPELINE_RUN_ID, STATUS, START_TIME, TENANT_ID, COMPANY_ID, FILE_PATH, MESSAGE)\nSELECT\nUUID_STRING(), 'Snowflake_test', '@{pipeline().RunId}', 'STARTED', CURRENT_TIMESTAMP(), '@{pipeline().parameters.tenantId}', '@{pipeline().parameters.companyId}', '@{pipeline().parameters.relativePath}', 'Snowflake pipeline execution started'",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "Set variable1",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Log Pipeline Start",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "TimestampFileName",
							"value": {
								"value": "@concat(\n  substring(pipeline().parameters.fileName, 0, lastIndexOf(pipeline().parameters.fileName, '.')),\n  '_',\n  formatDateTime(utcNow(), 'yyyyMMddHHmmss'),\n  '.',\n  last(array(split(pipeline().parameters.fileName, '.')))\n)\n",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Log Copy Error",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "SnowflakeCN",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "NonQuery",
									"text": {
										"value": "INSERT INTO JAVATEST.JAVATEST1.PIPELINE_EXECUTION_LOG\n(LOG_ID, PIPELINE_NAME, PIPELINE_RUN_ID, STATUS, ERROR_TIME, TENANT_ID, COMPANY_ID, FILE_PATH, MESSAGE, ERROR_DETAILS)\nSELECT\nUUID_STRING(), 'Snowflake_test', '@{pipeline().RunId}', 'ERROR', CURRENT_TIMESTAMP(), '@{pipeline().parameters.tenantId}', '@{pipeline().parameters.companyId}', '@{pipeline().parameters.relativePath}', 'Copy activity failed', '@{activity('Copy data1').error.message}'",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "Log Pipeline Success",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "SnowflakeCN",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "NonQuery",
									"text": {
										"value": "INSERT INTO JAVATEST.JAVATEST1.PIPELINE_EXECUTION_LOG\n(LOG_ID, PIPELINE_NAME, PIPELINE_RUN_ID, STATUS, END_TIME, TENANT_ID, COMPANY_ID, FILE_PATH, MESSAGE)\nSELECT\nUUID_STRING(), 'Snowflake_test', '@{pipeline().RunId}', 'SUCCESS', CURRENT_TIMESTAMP(), '@{pipeline().parameters.tenantId}', '@{pipeline().parameters.companyId}', '@{pipeline().parameters.relativePath}', 'Snowflake pipeline completed successfully'",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"tenantId": {
						"type": "string"
					},
					"containerName": {
						"type": "string"
					},
					"relativePath": {
						"type": "string"
					},
					"fileName": {
						"type": "string"
					},
					"folderPath": {
						"type": "string"
					},
					"companyId": {
						"type": "string"
					}
				},
				"variables": {
					"Tenant": {
						"type": "String"
					},
					"Container": {
						"type": "String"
					},
					"RelativePath": {
						"type": "String"
					},
					"FileName": {
						"type": "String"
					},
					"TimestampFileName": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2025-08-25T07:48:42Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_ClientSource')]",
				"[concat(variables('factoryId'), '/datasets/DS_tenant1Sink')]",
				"[concat(variables('factoryId'), '/linkedServices/SnowflakeCN')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TriggerCentral')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "Ingest",
							"type": "PipelineReference"
						},
						"parameters": {
							"relative_path": "[parameters('TriggerCentral_properties_Ingest_parameters_relative_path')]",
							"tenant_id": "[parameters('TriggerCentral_properties_Ingest_parameters_tenant_id')]",
							"company_id": "[parameters('TriggerCentral_properties_Ingest_parameters_company_id')]",
							"file_name": "[parameters('TriggerCentral_properties_Ingest_parameters_file_name')]",
							"sub_path": "[parameters('TriggerCentral_properties_Ingest_parameters_sub_path')]"
						}
					}
				],
				"type": "BlobEventsTrigger",
				"typeProperties": {
					"blobPathBeginsWith": "/central/blobs/",
					"blobPathEndsWith": ".mdb",
					"ignoreEmptyBlobs": true,
					"scope": "[parameters('TriggerCentral_properties_typeProperties_scope')]",
					"events": [
						"Microsoft.Storage.BlobCreated"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Ingest')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TriggerCentral_test')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "Ingest_test",
							"type": "PipelineReference"
						},
						"parameters": {
							"relative_path": "[parameters('TriggerCentral_test_properties_Ingest_test_parameters_relative_path')]",
							"tenant_id": "[parameters('TriggerCentral_test_properties_Ingest_test_parameters_tenant_id')]",
							"company_id": "[parameters('TriggerCentral_test_properties_Ingest_test_parameters_company_id')]",
							"file_name": "[parameters('TriggerCentral_test_properties_Ingest_test_parameters_file_name')]",
							"sub_path": "[parameters('TriggerCentral_test_properties_Ingest_test_parameters_sub_path')]"
						}
					}
				],
				"type": "BlobEventsTrigger",
				"typeProperties": {
					"blobPathBeginsWith": "/central/blobs/",
					"blobPathEndsWith": ".mdb",
					"ignoreEmptyBlobs": true,
					"scope": "[parameters('TriggerCentral_test_properties_typeProperties_scope')]",
					"events": [
						"Microsoft.Storage.BlobCreated"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Ingest_test')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TriggerSnowflake')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "Snowflake",
							"type": "PipelineReference"
						},
						"parameters": {
							"tenantId": "[parameters('TriggerSnowflake_properties_Snowflake_parameters_tenantId')]",
							"containerName": "[parameters('TriggerSnowflake_properties_Snowflake_parameters_containerName')]",
							"relativePath": "[parameters('TriggerSnowflake_properties_Snowflake_parameters_relativePath')]",
							"fileName": "[parameters('TriggerSnowflake_properties_Snowflake_parameters_fileName')]",
							"folderPath": "[parameters('TriggerSnowflake_properties_Snowflake_parameters_folderPath')]",
							"companyId": "[parameters('TriggerSnowflake_properties_Snowflake_parameters_companyId')]"
						}
					}
				],
				"type": "BlobEventsTrigger",
				"typeProperties": {
					"blobPathEndsWith": ".mdb",
					"ignoreEmptyBlobs": true,
					"scope": "[parameters('TriggerSnowflake_properties_typeProperties_scope')]",
					"events": [
						"Microsoft.Storage.BlobCreated"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Snowflake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TriggerSnowflake_test')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "Snowflake_test",
							"type": "PipelineReference"
						},
						"parameters": {
							"tenantId": "[parameters('TriggerSnowflake_test_properties_Snowflake_test_parameters_tenantId')]",
							"containerName": "[parameters('TriggerSnowflake_test_properties_Snowflake_test_parameters_containerName')]",
							"relativePath": "[parameters('TriggerSnowflake_test_properties_Snowflake_test_parameters_relativePath')]",
							"fileName": "[parameters('TriggerSnowflake_test_properties_Snowflake_test_parameters_fileName')]",
							"folderPath": "[parameters('TriggerSnowflake_test_properties_Snowflake_test_parameters_folderPath')]",
							"companyId": "[parameters('TriggerSnowflake_test_properties_Snowflake_test_parameters_companyId')]"
						}
					}
				],
				"type": "BlobEventsTrigger",
				"typeProperties": {
					"blobPathEndsWith": ".mdb",
					"ignoreEmptyBlobs": true,
					"scope": "[parameters('TriggerSnowflake_test_properties_typeProperties_scope')]",
					"events": [
						"Microsoft.Storage.BlobCreated"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Snowflake_test')]"
			]
		}
	]
}