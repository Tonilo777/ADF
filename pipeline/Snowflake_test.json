{
	"name": "Snowflake_test",
	"properties": {
		"activities": [
			{
				"name": "Copy data1",
				"type": "Copy",
				"dependsOn": [
					{
						"activity": "Set variable1",
						"dependencyConditions": [
							"Completed"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "BinarySource",
						"storeSettings": {
							"type": "AzureBlobStorageReadSettings",
							"recursive": true,
							"deleteFilesAfterCompletion": false
						},
						"formatSettings": {
							"type": "BinaryReadSettings"
						}
					},
					"sink": {
						"type": "BinarySink",
						"storeSettings": {
							"type": "AzureBlobStorageWriteSettings",
							"maxConcurrentConnections": 1,
							"copyBehavior": "PreserveHierarchy"
						}
					},
					"enableStaging": false
				},
				"inputs": [
					{
						"referenceName": "DS_ClientSource",
						"type": "DatasetReference",
						"parameters": {
							"containerName": {
								"value": "@pipeline().parameters.containerName",
								"type": "Expression"
							},
							"folderPath": {
								"value": "@pipeline().parameters.companyId",
								"type": "Expression"
							},
							"fileName": {
								"value": "@pipeline().parameters.fileName",
								"type": "Expression"
							}
						}
					}
				],
				"outputs": [
					{
						"referenceName": "DS_tenant1Sink",
						"type": "DatasetReference",
						"parameters": {
							"companyFolder": "@pipeline().parameters.folderPath",
							"fileName": {
								"value": "@variables('TimestampFileName')",
								"type": "Expression"
							}
						}
					}
				]
			},
			{
				"name": "Log Pipeline Start",
				"type": "Script",
				"dependsOn": [],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"linkedServiceName": {
					"referenceName": "SnowflakeCN",
					"type": "LinkedServiceReference"
				},
				"typeProperties": {
					"scripts": [
						{
							"type": "NonQuery",
							"text": {
								"value": "INSERT INTO JAVATEST.JAVATEST1.PIPELINE_EXECUTION_LOG\n(LOG_ID, PIPELINE_NAME, PIPELINE_RUN_ID, STATUS, START_TIME, TENANT_ID, COMPANY_ID, FILE_PATH, MESSAGE)\nSELECT\nUUID_STRING(), 'Snowflake_test', '@{pipeline().RunId}', 'STARTED', CURRENT_TIMESTAMP(), '@{pipeline().parameters.tenantId}', '@{pipeline().parameters.companyId}', '@{pipeline().parameters.relativePath}', 'Snowflake pipeline execution started'",
								"type": "Expression"
							}
						}
					],
					"scriptBlockExecutionTimeout": "02:00:00"
				}
			},
			{
				"name": "Set variable1",
				"type": "SetVariable",
				"dependsOn": [
					{
						"activity": "Log Pipeline Start",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"variableName": "TimestampFileName",
					"value": {
						"value": "@concat(\n  substring(pipeline().parameters.fileName, 0, lastIndexOf(pipeline().parameters.fileName, '.')),\n  '_',\n  formatDateTime(utcNow(), 'yyyyMMddHHmmss'),\n  '.',\n  last(array(split(pipeline().parameters.fileName, '.')))\n)\n",
						"type": "Expression"
					}
				}
			},
			{
				"name": "Log Copy Error",
				"type": "Script",
				"dependsOn": [
					{
						"activity": "Copy data1",
						"dependencyConditions": [
							"Failed"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"linkedServiceName": {
					"referenceName": "SnowflakeCN",
					"type": "LinkedServiceReference"
				},
				"typeProperties": {
					"scripts": [
						{
							"type": "NonQuery",
							"text": {
								"value": "INSERT INTO JAVATEST.JAVATEST1.PIPELINE_EXECUTION_LOG\n(LOG_ID, PIPELINE_NAME, PIPELINE_RUN_ID, STATUS, ERROR_TIME, TENANT_ID, COMPANY_ID, FILE_PATH, MESSAGE, ERROR_DETAILS)\nSELECT\nUUID_STRING(), 'Snowflake_test', '@{pipeline().RunId}', 'ERROR', CURRENT_TIMESTAMP(), '@{pipeline().parameters.tenantId}', '@{pipeline().parameters.companyId}', '@{pipeline().parameters.relativePath}', 'Copy activity failed', '@{activity('Copy data1').error.message}'",
								"type": "Expression"
							}
						}
					],
					"scriptBlockExecutionTimeout": "02:00:00"
				}
			},
			{
				"name": "Log Pipeline Success",
				"type": "Script",
				"dependsOn": [
					{
						"activity": "Copy data1",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"linkedServiceName": {
					"referenceName": "SnowflakeCN",
					"type": "LinkedServiceReference"
				},
				"typeProperties": {
					"scripts": [
						{
							"type": "NonQuery",
							"text": {
								"value": "INSERT INTO JAVATEST.JAVATEST1.PIPELINE_EXECUTION_LOG\n(LOG_ID, PIPELINE_NAME, PIPELINE_RUN_ID, STATUS, END_TIME, TENANT_ID, COMPANY_ID, FILE_PATH, MESSAGE)\nSELECT\nUUID_STRING(), 'Snowflake_test', '@{pipeline().RunId}', 'SUCCESS', CURRENT_TIMESTAMP(), '@{pipeline().parameters.tenantId}', '@{pipeline().parameters.companyId}', '@{pipeline().parameters.relativePath}', 'Snowflake pipeline completed successfully'",
								"type": "Expression"
							}
						}
					],
					"scriptBlockExecutionTimeout": "02:00:00"
				}
			}
		],
		"parameters": {
			"tenantId": {
				"type": "string"
			},
			"containerName": {
				"type": "string"
			},
			"relativePath": {
				"type": "string"
			},
			"fileName": {
				"type": "string"
			},
			"folderPath": {
				"type": "string"
			},
			"companyId": {
				"type": "string"
			}
		},
		"variables": {
			"Tenant": {
				"type": "String"
			},
			"Container": {
				"type": "String"
			},
			"RelativePath": {
				"type": "String"
			},
			"FileName": {
				"type": "String"
			},
			"TimestampFileName": {
				"type": "String"
			}
		},
		"annotations": [],
		"lastPublishTime": "2025-08-25T07:48:42Z"
	},
	"type": "Microsoft.DataFactory/factories/pipelines"
}